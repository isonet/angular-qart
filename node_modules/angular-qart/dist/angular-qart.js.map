{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///angular-qart.js","webpack:///webpack/bootstrap 1fc1d3312a5a74860e84","webpack:///./src/index.js","webpack:///./src/angular-qart.directive.js","webpack:///./~/qartjs/dist/qart.min.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_angularQartDirective","_angularQartDirective2","angular","directive","_qartjs","_qartjs2","replace","restrict","require","scope","optionFilter","imageUrl","template","link","$scope","element","attributes","ngModel","createQart","filter","arguments","length","undefined","imagePath","text","$viewValue","make","$watchGroup","newValues","$render","t","r","n","e","o","i","u","f","a","s","l","TypeError","DEFAULTS","key","QRCode","addData","createImgObject","onload","Image","src","createCanvas","width","height","document","createElement","getContext","drawImage","getImageData","data","h","g","v","Math","floor","d","y","threshold","putImageData","w","QRUtil","getPatternPosition","b","A","x","E","M","innerHTML","appendChild","get","window","QArt","enumerable","configurable","writable","prototype","S","F","G","P","B","W","apply","Function","virtual","R","U","self","__g","version","__e","toString","valueOf","Error","Array","getAt","getLength","multiply","gexp","glog","mod","O","_","T","C","getLostPoint","getBCHTypeNumber","getBCHTypeInfo","getMaskFunction","dataCount","totalCount","max","getBuffer","getErrorCorrectPolynomial","getRSBlocks","put","getMode","getLengthInBits","write","putBit","push","isDark","getModuleCount","createTableTag","createSvgTag","createImgTag","stringToBytes","charCodeAt","createStringToBytes","read","String","fromCharCode","charAt","MODE_NUMBER","MODE_ALPHA_NUM","MODE_8BIT_BYTE","MODE_KANJI","L","Q","H","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","abs","substring","writeByte","writeShort","writeBytes","writeString","toByteArray","flush","match","setPixel","add","contains","indexOf","size","constructor","_t","_i","done","slice","ceil","isNaN","keys","k","D","entries","name","values","hasOwnProperty","next","style","display","contentWindow","open","close","create","defineProperties","propertyIsEnumerable","split","min","random","concat","documentElement","Symbol","store","getPrototypeOf","_k","Arguments","KEY","JSON","stringify","N","I","j","J","QObject","K","findChild","Y","z","iterator","q","$","Z","V","X","tt","set","rt","et","for","keyFor","useSetter","useSimple","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","isExtensible","preventExtensions","NEED","fastKey","getWeak","onFreeze","isArray"],"mappings":"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","file":"angular-qart.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-qart\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-qart\"] = factory();\n\telse\n\t\troot[\"angular-qart\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-qart\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-qart\"] = factory();\n\telse\n\t\troot[\"angular-qart\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angularQartDirective = __webpack_require__(1);\n\t\n\tvar _angularQartDirective2 = _interopRequireDefault(_angularQartDirective);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = angular.module('angular-qart', []).directive('angularQart', _angularQartDirective2.default);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _qartjs = __webpack_require__(2);\n\t\n\tvar _qartjs2 = _interopRequireDefault(_qartjs);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = function () {\n\t    'ngInject';\n\t\n\t    return {\n\t        replace: true,\n\t        restrict: 'E',\n\t        require: 'ngModel',\n\t        scope: {\n\t            // https://github.com/kciter/qart.js\n\t            optionFilter: '@',\n\t            imageUrl: '@'\n\t        },\n\t        template: '',\n\t        link: function link($scope, element, attributes, ngModel) {\n\t            var createQart = function createQart() {\n\t                var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $scope.optionFilter;\n\t                var imagePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $scope.imageUrl;\n\t\n\t                var text = ngModel.$viewValue || '';\n\t                new _qartjs2.default({\n\t                    value: text,\n\t                    imagePath: imagePath,\n\t                    filter: filter\n\t                }).make(element[0]);\n\t            };\n\t            createQart();\n\t\n\t            $scope.$watchGroup(['imageUrl', 'optionFilter'], function (newValues) {\n\t                createQart(newValues.optionFilter, newValues.imageUrl);\n\t            }, true);\n\t\n\t            ngModel.$render = function () {\n\t                createQart();\n\t            };\n\t        }\n\t    };\n\t};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t!function(t,r){ true?module.exports=r():\"function\"==typeof define&&define.amd?define([],r):\"object\"==typeof exports?exports.qart=r():t.qart=r()}(this,function(){return function(t){function r(n){if(e[n])return e[n].exports;var o=e[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}var e={};return r.m=t,r.c=e,r.p=\"../dist/\",r(0)}([function(t,r,e){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(r,\"__esModule\",{value:!0});var o=e(1),i=n(o),u=e(2),f=n(u),a=e(21),c=e(75),s=n(c),l=function(){function t(r){if((0,i.default)(this,t),\"undefined\"==typeof r)throw new TypeError(\"QArt required `options`.\");if(\"undefined\"==typeof r.value)throw new TypeError(\"QArt required `value` option.\");if(\"undefined\"==typeof r.imagePath)throw new TypeError(\"QArt required `imagePath` option.\");this.filter=\"undefined\"==typeof r.filter?t.DEFAULTS.filter:r.filter,this.value=r.value,this.imagePath=r.imagePath}return(0,f.default)(t,[{key:\"make\",value:function(t){var r=195,e=12,n=(0,a.QRCode)(10,\"H\");n.addData(this.value),n.make();var o=n.createImgObject(3),i=this;o.onload=function(){var n=new Image;n.src=i.imagePath;var u=s.default.createCanvas(r,o),f=s.default.createCanvas(r,o);n.onload=function(){n.width<n.height?(n.height=(r-2*e)*(1*n.height/n.width),n.width=r-2*e):(n.width=(r-2*e)*(1*n.width/n.height),n.height=r-2*e);var o=document.createElement(\"canvas\");o.width=r,o.height=r,o.getContext(\"2d\").drawImage(n,e,e,r-2*e,r-2*e);for(var c=o.getContext(\"2d\").getImageData(0,0,r,r),l=c.data,h=u.getContext(\"2d\").getImageData(0,0,r,r),g=h.data,v=0;v<l.length;v+=4){var p=Math.floor(v/4)%r,d=Math.floor(Math.floor(v/4)/r);if((p%3!=1||d%3!=1)&&!(p<33&&(d<33||d>=r-33)||p>=r-33&&d<33)){if(\"threshold\"==i.filter){var y=s.default.threshold(l[v],l[v+1],l[v+2],127);g[v]=y,g[v+1]=y,g[v+2]=y}else\"color\"==i.filter&&(g[v]=l[v],g[v+1]=l[v+1],g[v+2]=l[v+2]);g[v+3]=l[v+3]}}u.getContext(\"2d\").putImageData(h,0,0);for(var w=a.QRUtil.getPatternPosition(10),v=0;v<w.length;v+=1)for(var m=0;m<w.length;m+=1){var p=w[v],d=w[m];if(!(6==p&&50==d||6==d&&50==p||6==p&&6==d)){var b=3*(p-2)+12,A=3*(d-2)+12,x=3*(p+3)+12-b,E=3*(d+3)+12-A,M=f.getContext(\"2d\").getImageData(b,A,x,E);u.getContext(\"2d\").putImageData(M,b,A)}}t.innerHTML=\"\",t.appendChild(u)}}}}],[{key:\"DEFAULTS\",get:function(){return{value:\"\",filter:\"threshold\"}}}]),t}();window.QArt=l,r.default=window.QArt},function(t,r){\"use strict\";r.__esModule=!0,r.default=function(t,r){if(!(t instanceof r))throw new TypeError(\"Cannot call a class as a function\")}},function(t,r,e){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}r.__esModule=!0;var o=e(3),i=n(o);r.default=function(){function t(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),(0,i.default)(t,n.key,n)}}return function(r,e,n){return e&&t(r.prototype,e),n&&t(r,n),r}}()},function(t,r,e){t.exports={default:e(4),__esModule:!0}},function(t,r,e){e(5);var n=e(8).Object;t.exports=function(t,r,e){return n.defineProperty(t,r,e)}},function(t,r,e){var n=e(6);n(n.S+n.F*!e(16),\"Object\",{defineProperty:e(12).f})},function(t,r,e){var n=e(7),o=e(8),i=e(9),u=e(11),f=\"prototype\",a=function(t,r,e){var c,s,l,h=t&a.F,g=t&a.G,v=t&a.S,p=t&a.P,d=t&a.B,y=t&a.W,w=g?o:o[r]||(o[r]={}),m=w[f],b=g?n:v?n[r]:(n[r]||{})[f];g&&(e=r);for(c in e)s=!h&&b&&void 0!==b[c],s&&c in w||(l=s?b[c]:e[c],w[c]=g&&\"function\"!=typeof b[c]?e[c]:d&&s?i(l,n):y&&b[c]==l?function(t){var r=function(r,e,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(r);case 2:return new t(r,e)}return new t(r,e,n)}return t.apply(this,arguments)};return r[f]=t[f],r}(l):p&&\"function\"==typeof l?i(Function.call,l):l,p&&((w.virtual||(w.virtual={}))[c]=l,t&a.R&&m&&!m[c]&&u(m,c,l)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,r){var e=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=e)},function(t,r){var e=t.exports={version:\"2.4.0\"};\"number\"==typeof __e&&(__e=e)},function(t,r,e){var n=e(10);t.exports=function(t,r,e){if(n(t),void 0===r)return t;switch(e){case 1:return function(e){return t.call(r,e)};case 2:return function(e,n){return t.call(r,e,n)};case 3:return function(e,n,o){return t.call(r,e,n,o)}}return function(){return t.apply(r,arguments)}}},function(t,r){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,r,e){var n=e(12),o=e(20);t.exports=e(16)?function(t,r,e){return n.f(t,r,o(1,e))}:function(t,r,e){return t[r]=e,t}},function(t,r,e){var n=e(13),o=e(15),i=e(19),u=Object.defineProperty;r.f=e(16)?Object.defineProperty:function(t,r,e){if(n(t),r=i(r,!0),n(e),o)try{return u(t,r,e)}catch(t){}if(\"get\"in e||\"set\"in e)throw TypeError(\"Accessors not supported!\");return\"value\"in e&&(t[r]=e.value),t}},function(t,r,e){var n=e(14);t.exports=function(t){if(!n(t))throw TypeError(t+\" is not an object!\");return t}},function(t,r){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,r,e){t.exports=!e(16)&&!e(17)(function(){return 7!=Object.defineProperty(e(18)(\"div\"),\"a\",{get:function(){return 7}}).a})},function(t,r,e){t.exports=!e(17)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,r){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,r,e){var n=e(14),o=e(7).document,i=n(o)&&n(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,r,e){var n=e(14);t.exports=function(t,r){if(!n(t))return t;var e,o;if(r&&\"function\"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;if(\"function\"==typeof(e=t.valueOf)&&!n(o=e.call(t)))return o;if(!r&&\"function\"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;throw TypeError(\"Can't convert object to primitive value\")}},function(t,r){t.exports=function(t,r){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:r}}},function(t,r,e){function n(t){return t&&t.__esModule?t:{default:t}}var o,i,u,f=e(22),a=(n(f),function(){function t(r,e){if(\"undefined\"==typeof r.length)throw new Error(r.length+\"/\"+e);var n=function(){for(var t=0;t<r.length&&0==r[t];)t+=1;for(var n=new Array(r.length-t+e),o=0;o<r.length-t;o+=1)n[o]=r[o+t];return n}(),o={};return o.getAt=function(t){return n[t]},o.getLength=function(){return n.length},o.multiply=function(r){for(var e=new Array(o.getLength()+r.getLength()-1),n=0;n<o.getLength();n+=1)for(var i=0;i<r.getLength();i+=1)e[n+i]^=u.gexp(u.glog(o.getAt(n))+u.glog(r.getAt(i)));return t(e,0)},o.mod=function(r){if(o.getLength()-r.getLength()<0)return o;for(var e=u.glog(o.getAt(0))-u.glog(r.getAt(0)),n=new Array(o.getLength()),i=0;i<o.getLength();i+=1)n[i]=o.getAt(i);for(var i=0;i<r.getLength();i+=1)n[i]^=u.gexp(u.glog(r.getAt(i))+e);return t(n,0).mod(r)},o}var r=function(r,e){var o=236,u=17,g=r,v=n[e],p=null,d=0,m=null,b=new Array,A={},x=function(t,r){d=4*g+17,p=function(t){for(var r=new Array(t),e=0;e<t;e+=1){r[e]=new Array(t);for(var n=0;n<t;n+=1)r[e][n]=null}return r}(d),E(0,0),E(d-7,0),E(0,d-7),O(),_(),B(t,r),g>=7&&T(t),null==m&&(m=C(g,v,b)),S(m,r)},E=function(t,r){for(var e=-1;e<=7;e+=1)if(!(t+e<=-1||d<=t+e))for(var n=-1;n<=7;n+=1)r+n<=-1||d<=r+n||(0<=e&&e<=6&&(0==n||6==n)||0<=n&&n<=6&&(0==e||6==e)||2<=e&&e<=4&&2<=n&&n<=4?p[t+e][r+n]=!0:p[t+e][r+n]=!1)},M=function(){for(var t=0,r=0,e=0;e<8;e+=1){x(!0,e);var n=i.getLostPoint(A);(0==e||t>n)&&(t=n,r=e)}return r},_=function(){for(var t=8;t<d-8;t+=1)null==p[t][6]&&(p[t][6]=t%2==0);for(var r=8;r<d-8;r+=1)null==p[6][r]&&(p[6][r]=r%2==0)},O=function(){for(var t=i.getPatternPosition(g),r=0;r<t.length;r+=1)for(var e=0;e<t.length;e+=1){var n=t[r],o=t[e];if(null==p[n][o])for(var u=-2;u<=2;u+=1)for(var f=-2;f<=2;f+=1)u==-2||2==u||f==-2||2==f||0==u&&0==f?p[n+u][o+f]=!0:p[n+u][o+f]=!1}},T=function(t){for(var r=i.getBCHTypeNumber(g),e=0;e<18;e+=1){var n=!t&&1==(r>>e&1);p[Math.floor(e/3)][e%3+d-8-3]=n}for(var e=0;e<18;e+=1){var n=!t&&1==(r>>e&1);p[e%3+d-8-3][Math.floor(e/3)]=n}},B=function(t,r){for(var e=v<<3|r,n=i.getBCHTypeInfo(e),o=0;o<15;o+=1){var u=!t&&1==(n>>o&1);o<6?p[o][8]=u:o<8?p[o+1][8]=u:p[d-15+o][8]=u}for(var o=0;o<15;o+=1){var u=!t&&1==(n>>o&1);o<8?p[8][d-o-1]=u:o<9?p[8][15-o-1+1]=u:p[8][15-o-1]=u}p[d-8][8]=!t},S=function(t,r){for(var e=-1,n=d-1,o=7,u=0,f=i.getMaskFunction(r),a=d-1;a>0;a-=2)for(6==a&&(a-=1);;){for(var c=0;c<2;c+=1)if(null==p[n][a-c]){var s=!1;u<t.length&&(s=1==(t[u]>>>o&1));var l=f(n,a-c);l&&(s=!s),p[n][a-c]=s,o-=1,o==-1&&(u+=1,o=7)}if(n+=e,n<0||d<=n){n-=e,e=-e;break}}},P=function(r,e){for(var n=0,o=0,u=0,f=new Array(e.length),a=new Array(e.length),c=0;c<e.length;c+=1){var s=e[c].dataCount,l=e[c].totalCount-s;o=Math.max(o,s),u=Math.max(u,l),f[c]=new Array(s);for(var h=0;h<f[c].length;h+=1)f[c][h]=255&r.getBuffer()[h+n];n+=s;var g=i.getErrorCorrectPolynomial(l),v=t(f[c],g.getLength()-1),p=v.mod(g);a[c]=new Array(g.getLength()-1);for(var h=0;h<a[c].length;h+=1){var d=h+p.getLength()-a[c].length;a[c][h]=d>=0?p.getAt(d):0}}for(var y=0,h=0;h<e.length;h+=1)y+=e[h].totalCount;for(var w=new Array(y),m=0,h=0;h<o;h+=1)for(var c=0;c<e.length;c+=1)h<f[c].length&&(w[m]=f[c][h],m+=1);for(var h=0;h<u;h+=1)for(var c=0;c<e.length;c+=1)h<a[c].length&&(w[m]=a[c][h],m+=1);return w},C=function(t,r,e){for(var n=f.getRSBlocks(t,r),c=a(),s=0;s<e.length;s+=1){var l=e[s];c.put(l.getMode(),4),c.put(l.getLength(),i.getLengthInBits(l.getMode(),t)),l.write(c)}for(var h=0,s=0;s<n.length;s+=1)h+=n[s].dataCount;if(c.getLengthInBits()>8*h)throw new Error(\"code length overflow. (\"+c.getLengthInBits()+\">\"+8*h+\")\");for(c.getLengthInBits()+4<=8*h&&c.put(0,4);c.getLengthInBits()%8!=0;)c.putBit(!1);for(;;){if(c.getLengthInBits()>=8*h)break;if(c.put(o,8),c.getLengthInBits()>=8*h)break;c.put(u,8)}return P(c,n)};return A.addData=function(t,r){r=r||\"Byte\";var e=null;switch(r){case\"Numeric\":e=c(t);break;case\"Alphanumeric\":e=s(t);break;case\"Byte\":e=l(t);break;case\"Kanji\":e=h(t);break;default:throw\"mode:\"+r}b.push(e),m=null},A.isDark=function(t,r){if(t<0||d<=t||r<0||d<=r)throw new Error(t+\",\"+r);return p[t][r]},A.getModuleCount=function(){return d},A.make=function(){x(!1,M())},A.createTableTag=function(t,r){t=t||2,r=\"undefined\"==typeof r?4*t:r;var e=\"\";e+='<table style=\"',e+=\" border-width: 0px; border-style: none;\",e+=\" border-collapse: collapse;\",e+=\" padding: 0px; margin: \"+r+\"px;\",e+='\">',e+=\"<tbody>\";for(var n=0;n<A.getModuleCount();n+=1){e+=\"<tr>\";for(var o=0;o<A.getModuleCount();o+=1)e+='<td style=\"',e+=\" border-width: 0px; border-style: none;\",e+=\" border-collapse: collapse;\",e+=\" padding: 0px; margin: 0px;\",e+=\" width: \"+t+\"px;\",e+=\" height: \"+t+\"px;\",e+=\" background-color: \",e+=A.isDark(n,o)?\"#000000\":\"#ffffff\",e+=\";\",e+='\"/>';e+=\"</tr>\"}return e+=\"</tbody>\",e+=\"</table>\"},A.createSvgTag=function(t,r){t=t||2,r=\"undefined\"==typeof r?4*t:r;var e,n,o,i,u,f=A.getModuleCount()*t+2*r,a=\"\";for(u=\"l\"+t+\",0 0,\"+t+\" -\"+t+\",0 0,-\"+t+\"z \",a+=\"<svg\",a+=' width=\"'+f+'px\"',a+=' height=\"'+f+'px\"',a+=' xmlns=\"http://www.w3.org/2000/svg\"',a+=\">\",a+='<path d=\"',o=0;o<A.getModuleCount();o+=1)for(i=o*t+r,e=0;e<A.getModuleCount();e+=1)A.isDark(o,e)&&(n=e*t+r,a+=\"M\"+n+\",\"+i+u);return a+='\" stroke=\"transparent\" fill=\"black\"/>',a+=\"</svg>\"},A.createImgTag=function(t,r){t=t||2,r=\"undefined\"==typeof r?4*t:r;var e=A.getModuleCount()*t+2*r,n=r,o=e-r;return y(e,e,function(r,e){if(n<=r&&r<o&&n<=e&&e<o){var i=Math.floor((r-n)/t),u=Math.floor((e-n)/t);return A.isDark(u,i)?0:1}return 1})},A.createImgObject=function(t,r){t=t||2,r=\"undefined\"==typeof r?4*t:r;var e=A.getModuleCount()*t+2*r,n=r,o=e-r;return w(e,e,function(r,e){if(n<=r&&r<o&&n<=e&&e<o){var i=Math.floor((r-n)/t),u=Math.floor((e-n)/t);return A.isDark(u,i)?0:1}return 1})},A};r.stringToBytes=function(t){for(var r=new Array,e=0;e<t.length;e+=1){var n=t.charCodeAt(e);r.push(255&n)}return r},r.createStringToBytes=function(t,r){var e=function(){for(var e=p(t),n=function(){var t=e.read();if(t==-1)throw new Error;return t},o=0,i={};;){var u=e.read();if(u==-1)break;var f=n(),a=n(),c=n(),s=String.fromCharCode(u<<8|f),l=a<<8|c;i[s]=l,o+=1}if(o!=r)throw new Error(o+\" != \"+r);return i}(),n=\"?\".charCodeAt(0);return function(t){for(var r=new Array,o=0;o<t.length;o+=1){var i=t.charCodeAt(o);if(i<128)r.push(i);else{var u=e[t.charAt(o)];\"number\"==typeof u?(255&u)==u?r.push(u):(r.push(u>>>8),r.push(255&u)):r.push(n)}}return r}};var e={MODE_NUMBER:1,MODE_ALPHA_NUM:2,MODE_8BIT_BYTE:4,MODE_KANJI:8},n={L:1,M:0,Q:3,H:2},o={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7},i=function(){var r=[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],n=1335,i=7973,f=21522,a={},c=function(t){for(var r=0;0!=t;)r+=1,t>>>=1;return r};return a.getBCHTypeInfo=function(t){for(var r=t<<10;c(r)-c(n)>=0;)r^=n<<c(r)-c(n);return(t<<10|r)^f},a.getBCHTypeNumber=function(t){for(var r=t<<12;c(r)-c(i)>=0;)r^=i<<c(r)-c(i);return t<<12|r},a.getPatternPosition=function(t){return r[t-1]},a.getMaskFunction=function(t){switch(t){case o.PATTERN000:return function(t,r){return(t+r)%2==0};case o.PATTERN001:return function(t,r){return t%2==0};case o.PATTERN010:return function(t,r){return r%3==0};case o.PATTERN011:return function(t,r){return(t+r)%3==0};case o.PATTERN100:return function(t,r){return(Math.floor(t/2)+Math.floor(r/3))%2==0};case o.PATTERN101:return function(t,r){return t*r%2+t*r%3==0};case o.PATTERN110:return function(t,r){return(t*r%2+t*r%3)%2==0};case o.PATTERN111:return function(t,r){return(t*r%3+(t+r)%2)%2==0};default:throw new Error(\"bad maskPattern:\"+t)}},a.getErrorCorrectPolynomial=function(r){for(var e=t([1],0),n=0;n<r;n+=1)e=e.multiply(t([1,u.gexp(n)],0));return e},a.getLengthInBits=function(t,r){if(1<=r&&r<10)switch(t){case e.MODE_NUMBER:return 10;case e.MODE_ALPHA_NUM:return 9;case e.MODE_8BIT_BYTE:return 8;case e.MODE_KANJI:return 8;default:throw new Error(\"mode:\"+t)}else if(r<27)switch(t){case e.MODE_NUMBER:return 12;case e.MODE_ALPHA_NUM:return 11;case e.MODE_8BIT_BYTE:return 16;case e.MODE_KANJI:return 10;default:throw new Error(\"mode:\"+t)}else{if(!(r<41))throw new Error(\"type:\"+r);switch(t){case e.MODE_NUMBER:return 14;case e.MODE_ALPHA_NUM:return 13;case e.MODE_8BIT_BYTE:return 16;case e.MODE_KANJI:return 12;default:throw new Error(\"mode:\"+t)}}},a.getLostPoint=function(t){for(var r=t.getModuleCount(),e=0,n=0;n<r;n+=1)for(var o=0;o<r;o+=1){for(var i=0,u=t.isDark(n,o),f=-1;f<=1;f+=1)if(!(n+f<0||r<=n+f))for(var a=-1;a<=1;a+=1)o+a<0||r<=o+a||0==f&&0==a||u==t.isDark(n+f,o+a)&&(i+=1);i>5&&(e+=3+i-5)}for(var n=0;n<r-1;n+=1)for(var o=0;o<r-1;o+=1){var c=0;t.isDark(n,o)&&(c+=1),t.isDark(n+1,o)&&(c+=1),t.isDark(n,o+1)&&(c+=1),t.isDark(n+1,o+1)&&(c+=1),0!=c&&4!=c||(e+=3)}for(var n=0;n<r;n+=1)for(var o=0;o<r-6;o+=1)t.isDark(n,o)&&!t.isDark(n,o+1)&&t.isDark(n,o+2)&&t.isDark(n,o+3)&&t.isDark(n,o+4)&&!t.isDark(n,o+5)&&t.isDark(n,o+6)&&(e+=40);for(var o=0;o<r;o+=1)for(var n=0;n<r-6;n+=1)t.isDark(n,o)&&!t.isDark(n+1,o)&&t.isDark(n+2,o)&&t.isDark(n+3,o)&&t.isDark(n+4,o)&&!t.isDark(n+5,o)&&t.isDark(n+6,o)&&(e+=40);for(var s=0,o=0;o<r;o+=1)for(var n=0;n<r;n+=1)t.isDark(n,o)&&(s+=1);var l=Math.abs(100*s/r/r-50)/5;return e+=10*l},a}(),u=function(){for(var t=new Array(256),r=new Array(256),e=0;e<8;e+=1)t[e]=1<<e;for(var e=8;e<256;e+=1)t[e]=t[e-4]^t[e-5]^t[e-6]^t[e-8];for(var e=0;e<255;e+=1)r[t[e]]=e;var n={};return n.glog=function(t){if(t<1)throw new Error(\"glog(\"+t+\")\");return r[t]},n.gexp=function(r){for(;r<0;)r+=255;for(;r>=256;)r-=255;return t[r]},n}(),f=function(){var t=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12,7,37,13],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],r=function(t,r){var e={};return e.totalCount=t,e.dataCount=r,e},e={},o=function(r,e){switch(e){case n.L:return t[4*(r-1)+0];case n.M:return t[4*(r-1)+1];case n.Q:return t[4*(r-1)+2];case n.H:return t[4*(r-1)+3];default:return}};return e.getRSBlocks=function(t,e){var n=o(t,e);if(\"undefined\"==typeof n)throw new Error(\"bad rs block @ typeNumber:\"+t+\"/errorCorrectionLevel:\"+e);for(var i=n.length/3,u=new Array,f=0;f<i;f+=1)for(var a=n[3*f+0],c=n[3*f+1],s=n[3*f+2],l=0;l<a;l+=1)u.push(r(c,s));return u},e}(),a=function(){var t=new Array,r=0,e={};return e.getBuffer=function(){return t},e.getAt=function(r){var e=Math.floor(r/8);return 1==(t[e]>>>7-r%8&1)},e.put=function(t,r){for(var n=0;n<r;n+=1)e.putBit(1==(t>>>r-n-1&1))},e.getLengthInBits=function(){return r},e.putBit=function(e){var n=Math.floor(r/8);t.length<=n&&t.push(0),e&&(t[n]|=128>>>r%8),r+=1},e},c=function(t){var r=e.MODE_NUMBER,n=t,o={};o.getMode=function(){return r},o.getLength=function(t){return n.length},o.write=function(t){for(var r=n,e=0;e+2<r.length;)t.put(i(r.substring(e,e+3)),10),e+=3;e<r.length&&(r.length-e==1?t.put(i(r.substring(e,e+1)),4):r.length-e==2&&t.put(i(r.substring(e,e+2)),7))};var i=function(t){for(var r=0,e=0;e<t.length;e+=1)r=10*r+u(t.charAt(e));return r},u=function(t){if(\"0\"<=t&&t<=\"9\")return t.charCodeAt(0)-\"0\".charCodeAt(0);throw\"illegal char :\"+t};return o},s=function(t){var r=e.MODE_ALPHA_NUM,n=t,o={};o.getMode=function(){return r},o.getLength=function(t){return n.length},o.write=function(t){for(var r=n,e=0;e+1<r.length;)t.put(45*i(r.charAt(e))+i(r.charAt(e+1)),11),e+=2;e<r.length&&t.put(i(r.charAt(e)),6)};var i=function(t){if(\"0\"<=t&&t<=\"9\")return t.charCodeAt(0)-\"0\".charCodeAt(0);if(\"A\"<=t&&t<=\"Z\")return t.charCodeAt(0)-\"A\".charCodeAt(0)+10;switch(t){case\" \":return 36;case\"$\":return 37;case\"%\":return 38;case\"*\":return 39;case\"+\":return 40;case\"-\":return 41;case\".\":return 42;case\"/\":return 43;case\":\":return 44;default:throw\"illegal char :\"+t}};return o},l=function(t){var n=e.MODE_8BIT_BYTE,o=r.stringToBytes(t),i={};return i.getMode=function(){return n},i.getLength=function(t){return o.length},i.write=function(t){for(var r=0;r<o.length;r+=1)t.put(o[r],8)},i},h=function(t){var n=e.MODE_KANJI,o=r.stringToBytes(t);!function(t,e){var n=r.stringToBytes(t);if(2!=n.length||(n[0]<<8|n[1])!=e)throw\"sjis not supported.\"}(\"友\",38726);var i={};return i.getMode=function(){return n},i.getLength=function(t){return~~(o.length/2)},i.write=function(t){for(var r=o,e=0;e+1<r.length;){var n=(255&r[e])<<8|255&r[e+1];if(33088<=n&&n<=40956)n-=33088;else{if(!(57408<=n&&n<=60351))throw\"illegal char at \"+(e+1)+\"/\"+n;n-=49472}n=192*(n>>>8&255)+(255&n),t.put(n,13),e+=2}if(e<r.length)throw\"illegal char at \"+(e+1)},i},g=function(){var t=new Array,r={};return r.writeByte=function(r){t.push(255&r)},r.writeShort=function(t){r.writeByte(t),r.writeByte(t>>>8)},r.writeBytes=function(t,e,n){e=e||0,n=n||t.length;for(var o=0;o<n;o+=1)r.writeByte(t[o+e])},r.writeString=function(t){for(var e=0;e<t.length;e+=1)r.writeByte(t.charCodeAt(e))},r.toByteArray=function(){return t},r.toString=function(){var r=\"\";r+=\"[\";for(var e=0;e<t.length;e+=1)e>0&&(r+=\",\"),r+=t[e];return r+=\"]\"},r},v=function(){var t=0,r=0,e=0,n=\"\",o={},i=function(t){n+=String.fromCharCode(u(63&t))},u=function(t){if(t<0);else{if(t<26)return 65+t;if(t<52)return 97+(t-26);if(t<62)return 48+(t-52);if(62==t)return 43;if(63==t)return 47}throw new Error(\"n:\"+t)};return o.writeByte=function(n){for(t=t<<8|255&n,r+=8,e+=1;r>=6;)i(t>>>r-6),r-=6},o.flush=function(){if(r>0&&(i(t<<6-r),t=0,r=0),e%3!=0)for(var o=3-e%3,u=0;u<o;u+=1)n+=\"=\"},o.toString=function(){return n},o},p=function(t){var r=t,e=0,n=0,o=0,i={};i.read=function(){for(;o<8;){if(e>=r.length){if(0==o)return-1;throw new Error(\"unexpected end of file./\"+o)}var t=r.charAt(e);if(e+=1,\"=\"==t)return o=0,-1;t.match(/^\\s$/)||(n=n<<6|u(t.charCodeAt(0)),o+=6)}var i=n>>>o-8&255;return o-=8,i};var u=function(t){if(65<=t&&t<=90)return t-65;if(97<=t&&t<=122)return t-97+26;if(48<=t&&t<=57)return t-48+52;if(43==t)return 62;if(47==t)return 63;throw new Error(\"c:\"+t)};return i},d=function(t,r){var e=t,n=r,o=new Array(t*r),i={};i.setPixel=function(t,r,n){o[r*e+t]=n},i.write=function(t){t.writeString(\"GIF87a\"),t.writeShort(e),t.writeShort(n),t.writeByte(128),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(255),t.writeByte(255),t.writeByte(255),t.writeString(\",\"),t.writeShort(0),t.writeShort(0),t.writeShort(e),t.writeShort(n),t.writeByte(0);var r=2,o=f(r);t.writeByte(r);for(var i=0;o.length-i>255;)t.writeByte(255),t.writeBytes(o,i,255),i+=255;t.writeByte(o.length-i),t.writeBytes(o,i,o.length-i),t.writeByte(0),t.writeString(\";\")};var u=function(t){var r=t,e=0,n=0,o={};return o.write=function(t,o){if(t>>>o!=0)throw new Error(\"length over\");for(;e+o>=8;)r.writeByte(255&(t<<e|n)),o-=8-e,t>>>=8-e,n=0,e=0;n|=t<<e,e+=o},o.flush=function(){e>0&&r.writeByte(n)},o},f=function(t){for(var r=1<<t,e=(1<<t)+1,n=t+1,i=a(),f=0;f<r;f+=1)i.add(String.fromCharCode(f));i.add(String.fromCharCode(r)),i.add(String.fromCharCode(e));var c=g(),s=u(c);s.write(r,n);var l=0,h=String.fromCharCode(o[l]);for(l+=1;l<o.length;){var v=String.fromCharCode(o[l]);l+=1,i.contains(h+v)?h+=v:(s.write(i.indexOf(h),n),i.size()<4095&&(i.size()==1<<n&&(n+=1),i.add(h+v)),h=v)}return s.write(i.indexOf(h),n),s.write(e,n),s.flush(),c.toByteArray()},a=function(){var t={},r=0,e={};return e.add=function(n){if(e.contains(n))throw new Error(\"dup key:\"+n);t[n]=r,r+=1},e.size=function(){return r},e.indexOf=function(r){return t[r]},e.contains=function(r){return\"undefined\"!=typeof t[r]},e};return i},y=function(t,r,e,n){for(var o=d(t,r),i=0;i<r;i+=1)for(var u=0;u<t;u+=1)o.setPixel(u,i,e(u,i));var f=g();o.write(f);for(var a=v(),c=f.toByteArray(),s=0;s<c.length;s+=1)a.writeByte(c[s]);a.flush();var l=\"\";return l+=\"<img\",l+=' src=\"',l+=\"data:image/gif;base64,\",l+=a,l+='\"',l+=' width=\"',l+=t,l+='\"',l+=' height=\"',l+=r,l+='\"',n&&(l+=' alt=\"',l+=n,l+='\"'),l+=\"/>\"},w=function(t,r,e){for(var n=d(t,r),o=0;o<r;o+=1)for(var i=0;i<t;i+=1)n.setPixel(i,o,e(i,o));var u=g();n.write(u);for(var f=v(),a=u.toByteArray(),c=0;c<a.length;c+=1)f.writeByte(a[c]);f.flush();var s=new Image;return s.src=\"data:image/gif;base64,\"+f,s.width=t,s.height=r,s};return{QRCode:r,QRUtil:i}}());!function(e){i=[],o=e,u=\"function\"==typeof o?o.apply(r,i):o,!(void 0!==u&&(t.exports=u))}(function(){return{QRCode:a.QRCode,QRUtil:a.QRUtil}})},function(t,r,e){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}r.__esModule=!0;var o=e(23),i=n(o),u=e(59),f=n(u),a=\"function\"==typeof f.default&&\"symbol\"==typeof i.default?function(t){return typeof t}:function(t){return t&&\"function\"==typeof f.default&&t.constructor===f.default&&t!==f.default.prototype?\"symbol\":typeof t};r.default=\"function\"==typeof f.default&&\"symbol\"===a(i.default)?function(t){return\"undefined\"==typeof t?\"undefined\":a(t)}:function(t){return t&&\"function\"==typeof f.default&&t.constructor===f.default&&t!==f.default.prototype?\"symbol\":\"undefined\"==typeof t?\"undefined\":a(t)}},function(t,r,e){t.exports={default:e(24),__esModule:!0}},function(t,r,e){e(25),e(54),t.exports=e(58).f(\"iterator\")},function(t,r,e){\"use strict\";var n=e(26)(!0);e(29)(String,\"String\",function(t){this._t=String(t),this._i=0},function(){var t,r=this._t,e=this._i;return e>=r.length?{value:void 0,done:!0}:(t=n(r,e),this._i+=t.length,{value:t,done:!1})})},function(t,r,e){var n=e(27),o=e(28);t.exports=function(t){return function(r,e){var i,u,f=String(o(r)),a=n(e),c=f.length;return a<0||a>=c?t?\"\":void 0:(i=f.charCodeAt(a),i<55296||i>56319||a+1===c||(u=f.charCodeAt(a+1))<56320||u>57343?t?f.charAt(a):i:t?f.slice(a,a+2):(i-55296<<10)+(u-56320)+65536)}}},function(t,r){var e=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:e)(t)}},function(t,r){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,r,e){\"use strict\";var n=e(30),o=e(6),i=e(31),u=e(11),f=e(32),a=e(33),c=e(34),s=e(50),l=e(52),h=e(51)(\"iterator\"),g=!([].keys&&\"next\"in[].keys()),v=\"@@iterator\",p=\"keys\",d=\"values\",y=function(){return this};t.exports=function(t,r,e,w,m,b,A){c(e,r,w);var x,E,M,_=function(t){if(!g&&t in S)return S[t];switch(t){case p:return function(){return new e(this,t)};case d:return function(){return new e(this,t)}}return function(){return new e(this,t)}},O=r+\" Iterator\",T=m==d,B=!1,S=t.prototype,P=S[h]||S[v]||m&&S[m],C=P||_(m),k=m?T?_(\"entries\"):C:void 0,D=\"Array\"==r?S.entries||P:P;if(D&&(M=l(D.call(new t)),M!==Object.prototype&&(s(M,O,!0),n||f(M,h)||u(M,h,y))),T&&P&&P.name!==d&&(B=!0,C=function(){return P.call(this)}),n&&!A||!g&&!B&&S[h]||u(S,h,C),a[r]=C,a[O]=y,m)if(x={values:T?C:_(d),keys:b?C:_(p),entries:k},A)for(E in x)E in S||i(S,E,x[E]);else o(o.P+o.F*(g||B),r,x);return x}},function(t,r){t.exports=!0},function(t,r,e){t.exports=e(11)},function(t,r){var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},function(t,r){t.exports={}},function(t,r,e){\"use strict\";var n=e(35),o=e(20),i=e(50),u={};e(11)(u,e(51)(\"iterator\"),function(){return this}),t.exports=function(t,r,e){t.prototype=n(u,{next:o(1,e)}),i(t,r+\" Iterator\")}},function(t,r,e){var n=e(13),o=e(36),i=e(48),u=e(45)(\"IE_PROTO\"),f=function(){},a=\"prototype\",c=function(){var t,r=e(18)(\"iframe\"),n=i.length,o=\"<\",u=\">\";for(r.style.display=\"none\",e(49).appendChild(r),r.src=\"javascript:\",t=r.contentWindow.document,t.open(),t.write(o+\"script\"+u+\"document.F=Object\"+o+\"/script\"+u),t.close(),c=t.F;n--;)delete c[a][i[n]];return c()};t.exports=Object.create||function(t,r){var e;return null!==t?(f[a]=n(t),e=new f,f[a]=null,e[u]=t):e=c(),void 0===r?e:o(e,r)}},function(t,r,e){var n=e(12),o=e(13),i=e(37);t.exports=e(16)?Object.defineProperties:function(t,r){o(t);for(var e,u=i(r),f=u.length,a=0;f>a;)n.f(t,e=u[a++],r[e]);return t}},function(t,r,e){var n=e(38),o=e(48);t.exports=Object.keys||function(t){return n(t,o)}},function(t,r,e){var n=e(32),o=e(39),i=e(42)(!1),u=e(45)(\"IE_PROTO\");t.exports=function(t,r){var e,f=o(t),a=0,c=[];for(e in f)e!=u&&n(f,e)&&c.push(e);for(;r.length>a;)n(f,e=r[a++])&&(~i(c,e)||c.push(e));return c}},function(t,r,e){var n=e(40),o=e(28);t.exports=function(t){return n(o(t))}},function(t,r,e){var n=e(41);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==n(t)?t.split(\"\"):Object(t)}},function(t,r){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,r,e){var n=e(39),o=e(43),i=e(44);t.exports=function(t){return function(r,e,u){var f,a=n(r),c=o(a.length),s=i(u,c);if(t&&e!=e){for(;c>s;)if(f=a[s++],f!=f)return!0}else for(;c>s;s++)if((t||s in a)&&a[s]===e)return t||s||0;return!t&&-1}}},function(t,r,e){var n=e(27),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},function(t,r,e){var n=e(27),o=Math.max,i=Math.min;t.exports=function(t,r){return t=n(t),t<0?o(t+r,0):i(t,r)}},function(t,r,e){var n=e(46)(\"keys\"),o=e(47);t.exports=function(t){return n[t]||(n[t]=o(t))}},function(t,r,e){var n=e(7),o=\"__core-js_shared__\",i=n[o]||(n[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,r){var e=0,n=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++e+n).toString(36))}},function(t,r){t.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},function(t,r,e){t.exports=e(7).document&&document.documentElement},function(t,r,e){var n=e(12).f,o=e(32),i=e(51)(\"toStringTag\");t.exports=function(t,r,e){t&&!o(t=e?t:t.prototype,i)&&n(t,i,{configurable:!0,value:r})}},function(t,r,e){var n=e(46)(\"wks\"),o=e(47),i=e(7).Symbol,u=\"function\"==typeof i,f=t.exports=function(t){return n[t]||(n[t]=u&&i[t]||(u?i:o)(\"Symbol.\"+t))};f.store=n},function(t,r,e){var n=e(32),o=e(53),i=e(45)(\"IE_PROTO\"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),n(t,i)?t[i]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,r,e){var n=e(28);t.exports=function(t){return Object(n(t))}},function(t,r,e){e(55);for(var n=e(7),o=e(11),i=e(33),u=e(51)(\"toStringTag\"),f=[\"NodeList\",\"DOMTokenList\",\"MediaList\",\"StyleSheetList\",\"CSSRuleList\"],a=0;a<5;a++){var c=f[a],s=n[c],l=s&&s.prototype;l&&!l[u]&&o(l,u,c),i[c]=i.Array}},function(t,r,e){\"use strict\";var n=e(56),o=e(57),i=e(33),u=e(39);t.exports=e(29)(Array,\"Array\",function(t,r){this._t=u(t),this._i=0,this._k=r},function(){var t=this._t,r=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,o(1)):\"keys\"==r?o(0,e):\"values\"==r?o(0,t[e]):o(0,[e,t[e]])},\"values\"),i.Arguments=i.Array,n(\"keys\"),n(\"values\"),n(\"entries\")},function(t,r){t.exports=function(){}},function(t,r){t.exports=function(t,r){return{value:r,done:!!t}}},function(t,r,e){r.f=e(51)},function(t,r,e){t.exports={default:e(60),__esModule:!0}},function(t,r,e){e(61),e(72),e(73),e(74),t.exports=e(8).Symbol},function(t,r,e){\"use strict\";var n=e(7),o=e(32),i=e(16),u=e(6),f=e(31),a=e(62).KEY,c=e(17),s=e(46),l=e(50),h=e(47),g=e(51),v=e(58),p=e(63),d=e(64),y=e(65),w=e(68),m=e(13),b=e(39),A=e(19),x=e(20),E=e(35),M=e(69),_=e(71),O=e(12),T=e(37),B=_.f,S=O.f,P=M.f,C=n.Symbol,k=n.JSON,D=k&&k.stringify,N=\"prototype\",I=g(\"_hidden\"),L=g(\"toPrimitive\"),j={}.propertyIsEnumerable,R=s(\"symbol-registry\"),F=s(\"symbols\"),U=s(\"op-symbols\"),Q=Object[N],H=\"function\"==typeof C,J=n.QObject,K=!J||!J[N]||!J[N].findChild,Y=i&&c(function(){\n\treturn 7!=E(S({},\"a\",{get:function(){return S(this,\"a\",{value:7}).a}})).a})?function(t,r,e){var n=B(Q,r);n&&delete Q[r],S(t,r,e),n&&t!==Q&&S(Q,r,n)}:S,z=function(t){var r=F[t]=E(C[N]);return r._k=t,r},W=H&&\"symbol\"==typeof C.iterator?function(t){return\"symbol\"==typeof t}:function(t){return t instanceof C},q=function(t,r,e){return t===Q&&q(U,r,e),m(t),r=A(r,!0),m(e),o(F,r)?(e.enumerable?(o(t,I)&&t[I][r]&&(t[I][r]=!1),e=E(e,{enumerable:x(0,!1)})):(o(t,I)||S(t,I,x(1,{})),t[I][r]=!0),Y(t,r,e)):S(t,r,e)},G=function(t,r){m(t);for(var e,n=y(r=b(r)),o=0,i=n.length;i>o;)q(t,e=n[o++],r[e]);return t},$=function(t,r){return void 0===r?E(t):G(E(t),r)},Z=function(t){var r=j.call(this,t=A(t,!0));return!(this===Q&&o(F,t)&&!o(U,t))&&(!(r||!o(this,t)||!o(F,t)||o(this,I)&&this[I][t])||r)},V=function(t,r){if(t=b(t),r=A(r,!0),t!==Q||!o(F,r)||o(U,r)){var e=B(t,r);return!e||!o(F,r)||o(t,I)&&t[I][r]||(e.enumerable=!0),e}},X=function(t){for(var r,e=P(b(t)),n=[],i=0;e.length>i;)o(F,r=e[i++])||r==I||r==a||n.push(r);return n},tt=function(t){for(var r,e=t===Q,n=P(e?U:b(t)),i=[],u=0;n.length>u;)!o(F,r=n[u++])||e&&!o(Q,r)||i.push(F[r]);return i};H||(C=function(){if(this instanceof C)throw TypeError(\"Symbol is not a constructor!\");var t=h(arguments.length>0?arguments[0]:void 0),r=function(e){this===Q&&r.call(U,e),o(this,I)&&o(this[I],t)&&(this[I][t]=!1),Y(this,t,x(1,e))};return i&&K&&Y(Q,t,{configurable:!0,set:r}),z(t)},f(C[N],\"toString\",function(){return this._k}),_.f=V,O.f=q,e(70).f=M.f=X,e(67).f=Z,e(66).f=tt,i&&!e(30)&&f(Q,\"propertyIsEnumerable\",Z,!0),v.f=function(t){return z(g(t))}),u(u.G+u.W+u.F*!H,{Symbol:C});for(var rt=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),et=0;rt.length>et;)g(rt[et++]);for(var rt=T(g.store),et=0;rt.length>et;)p(rt[et++]);u(u.S+u.F*!H,\"Symbol\",{for:function(t){return o(R,t+=\"\")?R[t]:R[t]=C(t)},keyFor:function(t){if(W(t))return d(R,t);throw TypeError(t+\" is not a symbol!\")},useSetter:function(){K=!0},useSimple:function(){K=!1}}),u(u.S+u.F*!H,\"Object\",{create:$,defineProperty:q,defineProperties:G,getOwnPropertyDescriptor:V,getOwnPropertyNames:X,getOwnPropertySymbols:tt}),k&&u(u.S+u.F*(!H||c(function(){var t=C();return\"[null]\"!=D([t])||\"{}\"!=D({a:t})||\"{}\"!=D(Object(t))})),\"JSON\",{stringify:function(t){if(void 0!==t&&!W(t)){for(var r,e,n=[t],o=1;arguments.length>o;)n.push(arguments[o++]);return r=n[1],\"function\"==typeof r&&(e=r),!e&&w(r)||(r=function(t,r){if(e&&(r=e.call(this,t,r)),!W(r))return r}),n[1]=r,D.apply(k,n)}}}),C[N][L]||e(11)(C[N],L,C[N].valueOf),l(C,\"Symbol\"),l(Math,\"Math\",!0),l(n.JSON,\"JSON\",!0)},function(t,r,e){var n=e(47)(\"meta\"),o=e(14),i=e(32),u=e(12).f,f=0,a=Object.isExtensible||function(){return!0},c=!e(17)(function(){return a(Object.preventExtensions({}))}),s=function(t){u(t,n,{value:{i:\"O\"+ ++f,w:{}}})},l=function(t,r){if(!o(t))return\"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!i(t,n)){if(!a(t))return\"F\";if(!r)return\"E\";s(t)}return t[n].i},h=function(t,r){if(!i(t,n)){if(!a(t))return!0;if(!r)return!1;s(t)}return t[n].w},g=function(t){return c&&v.NEED&&a(t)&&!i(t,n)&&s(t),t},v=t.exports={KEY:n,NEED:!1,fastKey:l,getWeak:h,onFreeze:g}},function(t,r,e){var n=e(7),o=e(8),i=e(30),u=e(58),f=e(12).f;t.exports=function(t){var r=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});\"_\"==t.charAt(0)||t in r||f(r,t,{value:u.f(t)})}},function(t,r,e){var n=e(37),o=e(39);t.exports=function(t,r){for(var e,i=o(t),u=n(i),f=u.length,a=0;f>a;)if(i[e=u[a++]]===r)return e}},function(t,r,e){var n=e(37),o=e(66),i=e(67);t.exports=function(t){var r=n(t),e=o.f;if(e)for(var u,f=e(t),a=i.f,c=0;f.length>c;)a.call(t,u=f[c++])&&r.push(u);return r}},function(t,r){r.f=Object.getOwnPropertySymbols},function(t,r){r.f={}.propertyIsEnumerable},function(t,r,e){var n=e(41);t.exports=Array.isArray||function(t){return\"Array\"==n(t)}},function(t,r,e){var n=e(39),o=e(70).f,i={}.toString,u=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],f=function(t){try{return o(t)}catch(t){return u.slice()}};t.exports.f=function(t){return u&&\"[object Window]\"==i.call(t)?f(t):o(n(t))}},function(t,r,e){var n=e(38),o=e(48).concat(\"length\",\"prototype\");r.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},function(t,r,e){var n=e(67),o=e(20),i=e(39),u=e(19),f=e(32),a=e(15),c=Object.getOwnPropertyDescriptor;r.f=e(16)?c:function(t,r){if(t=i(t),r=u(r,!0),a)try{return c(t,r)}catch(t){}if(f(t,r))return o(!n.f.call(t,r),t[r])}},function(t,r){},function(t,r,e){e(63)(\"asyncIterator\")},function(t,r,e){e(63)(\"observable\")},function(t,r,e){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(r,\"__esModule\",{value:!0});var o=e(1),i=n(o),u=e(2),f=n(u),a=function(){function t(){(0,i.default)(this,t)}return(0,f.default)(t,null,[{key:\"createCanvas\",value:function(t,r){var e=document.createElement(\"canvas\");return e.width=t,e.height=t,e.getContext(\"2d\").drawImage(r,0,0,t,t),e}},{key:\"threshold\",value:function(t,r,e,n){return.2126*t+.7152*r+.0722*e>=n?255:0}}]),t}();r.default=a}])});\n\t//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// angular-qart.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1fc1d3312a5a74860e84","import QartDirective from './angular-qart.directive.js';\n\nexport default angular.module('angular-qart', []).directive('angularQart', QartDirective);\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import QArt from 'qartjs';\n\nexport default () => {\n    'ngInject';\n\n    return {\n        replace: true,\n        restrict: 'E',\n        require: 'ngModel',\n        scope: {\n            // https://github.com/kciter/qart.js\n            optionFilter: '@',\n            imageUrl: '@'\n        },\n        template: '',\n        link: ($scope, element, attributes, ngModel) => {\n            const createQart = (filter = $scope.optionFilter, imagePath = $scope.imageUrl) => {\n                const text = ngModel.$viewValue || '';\n                new QArt({\n                    value: text,\n                    imagePath,\n                    filter\n                }).make(element[0]);\n            };\n            createQart();\n\n            $scope.$watchGroup(['imageUrl', 'optionFilter'], (newValues) => {\n                createQart(newValues.optionFilter, newValues.imageUrl);\n            }, true);\n\n            ngModel.$render = () => {\n                createQart();\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/angular-qart.directive.js","!function(t,r){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=r():\"function\"==typeof define&&define.amd?define([],r):\"object\"==typeof exports?exports.qart=r():t.qart=r()}(this,function(){return function(t){function r(n){if(e[n])return e[n].exports;var o=e[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}var e={};return r.m=t,r.c=e,r.p=\"../dist/\",r(0)}([function(t,r,e){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(r,\"__esModule\",{value:!0});var o=e(1),i=n(o),u=e(2),f=n(u),a=e(21),c=e(75),s=n(c),l=function(){function t(r){if((0,i.default)(this,t),\"undefined\"==typeof r)throw new TypeError(\"QArt required `options`.\");if(\"undefined\"==typeof r.value)throw new TypeError(\"QArt required `value` option.\");if(\"undefined\"==typeof r.imagePath)throw new TypeError(\"QArt required `imagePath` option.\");this.filter=\"undefined\"==typeof r.filter?t.DEFAULTS.filter:r.filter,this.value=r.value,this.imagePath=r.imagePath}return(0,f.default)(t,[{key:\"make\",value:function(t){var r=195,e=12,n=(0,a.QRCode)(10,\"H\");n.addData(this.value),n.make();var o=n.createImgObject(3),i=this;o.onload=function(){var n=new Image;n.src=i.imagePath;var u=s.default.createCanvas(r,o),f=s.default.createCanvas(r,o);n.onload=function(){n.width<n.height?(n.height=(r-2*e)*(1*n.height/n.width),n.width=r-2*e):(n.width=(r-2*e)*(1*n.width/n.height),n.height=r-2*e);var o=document.createElement(\"canvas\");o.width=r,o.height=r,o.getContext(\"2d\").drawImage(n,e,e,r-2*e,r-2*e);for(var c=o.getContext(\"2d\").getImageData(0,0,r,r),l=c.data,h=u.getContext(\"2d\").getImageData(0,0,r,r),g=h.data,v=0;v<l.length;v+=4){var p=Math.floor(v/4)%r,d=Math.floor(Math.floor(v/4)/r);if((p%3!=1||d%3!=1)&&!(p<33&&(d<33||d>=r-33)||p>=r-33&&d<33)){if(\"threshold\"==i.filter){var y=s.default.threshold(l[v],l[v+1],l[v+2],127);g[v]=y,g[v+1]=y,g[v+2]=y}else\"color\"==i.filter&&(g[v]=l[v],g[v+1]=l[v+1],g[v+2]=l[v+2]);g[v+3]=l[v+3]}}u.getContext(\"2d\").putImageData(h,0,0);for(var w=a.QRUtil.getPatternPosition(10),v=0;v<w.length;v+=1)for(var m=0;m<w.length;m+=1){var p=w[v],d=w[m];if(!(6==p&&50==d||6==d&&50==p||6==p&&6==d)){var b=3*(p-2)+12,A=3*(d-2)+12,x=3*(p+3)+12-b,E=3*(d+3)+12-A,M=f.getContext(\"2d\").getImageData(b,A,x,E);u.getContext(\"2d\").putImageData(M,b,A)}}t.innerHTML=\"\",t.appendChild(u)}}}}],[{key:\"DEFAULTS\",get:function(){return{value:\"\",filter:\"threshold\"}}}]),t}();window.QArt=l,r.default=window.QArt},function(t,r){\"use strict\";r.__esModule=!0,r.default=function(t,r){if(!(t instanceof r))throw new TypeError(\"Cannot call a class as a function\")}},function(t,r,e){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}r.__esModule=!0;var o=e(3),i=n(o);r.default=function(){function t(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),(0,i.default)(t,n.key,n)}}return function(r,e,n){return e&&t(r.prototype,e),n&&t(r,n),r}}()},function(t,r,e){t.exports={default:e(4),__esModule:!0}},function(t,r,e){e(5);var n=e(8).Object;t.exports=function(t,r,e){return n.defineProperty(t,r,e)}},function(t,r,e){var n=e(6);n(n.S+n.F*!e(16),\"Object\",{defineProperty:e(12).f})},function(t,r,e){var n=e(7),o=e(8),i=e(9),u=e(11),f=\"prototype\",a=function(t,r,e){var c,s,l,h=t&a.F,g=t&a.G,v=t&a.S,p=t&a.P,d=t&a.B,y=t&a.W,w=g?o:o[r]||(o[r]={}),m=w[f],b=g?n:v?n[r]:(n[r]||{})[f];g&&(e=r);for(c in e)s=!h&&b&&void 0!==b[c],s&&c in w||(l=s?b[c]:e[c],w[c]=g&&\"function\"!=typeof b[c]?e[c]:d&&s?i(l,n):y&&b[c]==l?function(t){var r=function(r,e,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(r);case 2:return new t(r,e)}return new t(r,e,n)}return t.apply(this,arguments)};return r[f]=t[f],r}(l):p&&\"function\"==typeof l?i(Function.call,l):l,p&&((w.virtual||(w.virtual={}))[c]=l,t&a.R&&m&&!m[c]&&u(m,c,l)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,r){var e=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=e)},function(t,r){var e=t.exports={version:\"2.4.0\"};\"number\"==typeof __e&&(__e=e)},function(t,r,e){var n=e(10);t.exports=function(t,r,e){if(n(t),void 0===r)return t;switch(e){case 1:return function(e){return t.call(r,e)};case 2:return function(e,n){return t.call(r,e,n)};case 3:return function(e,n,o){return t.call(r,e,n,o)}}return function(){return t.apply(r,arguments)}}},function(t,r){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,r,e){var n=e(12),o=e(20);t.exports=e(16)?function(t,r,e){return n.f(t,r,o(1,e))}:function(t,r,e){return t[r]=e,t}},function(t,r,e){var n=e(13),o=e(15),i=e(19),u=Object.defineProperty;r.f=e(16)?Object.defineProperty:function(t,r,e){if(n(t),r=i(r,!0),n(e),o)try{return u(t,r,e)}catch(t){}if(\"get\"in e||\"set\"in e)throw TypeError(\"Accessors not supported!\");return\"value\"in e&&(t[r]=e.value),t}},function(t,r,e){var n=e(14);t.exports=function(t){if(!n(t))throw TypeError(t+\" is not an object!\");return t}},function(t,r){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,r,e){t.exports=!e(16)&&!e(17)(function(){return 7!=Object.defineProperty(e(18)(\"div\"),\"a\",{get:function(){return 7}}).a})},function(t,r,e){t.exports=!e(17)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,r){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,r,e){var n=e(14),o=e(7).document,i=n(o)&&n(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,r,e){var n=e(14);t.exports=function(t,r){if(!n(t))return t;var e,o;if(r&&\"function\"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;if(\"function\"==typeof(e=t.valueOf)&&!n(o=e.call(t)))return o;if(!r&&\"function\"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;throw TypeError(\"Can't convert object to primitive value\")}},function(t,r){t.exports=function(t,r){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:r}}},function(t,r,e){function n(t){return t&&t.__esModule?t:{default:t}}var o,i,u,f=e(22),a=(n(f),function(){function t(r,e){if(\"undefined\"==typeof r.length)throw new Error(r.length+\"/\"+e);var n=function(){for(var t=0;t<r.length&&0==r[t];)t+=1;for(var n=new Array(r.length-t+e),o=0;o<r.length-t;o+=1)n[o]=r[o+t];return n}(),o={};return o.getAt=function(t){return n[t]},o.getLength=function(){return n.length},o.multiply=function(r){for(var e=new Array(o.getLength()+r.getLength()-1),n=0;n<o.getLength();n+=1)for(var i=0;i<r.getLength();i+=1)e[n+i]^=u.gexp(u.glog(o.getAt(n))+u.glog(r.getAt(i)));return t(e,0)},o.mod=function(r){if(o.getLength()-r.getLength()<0)return o;for(var e=u.glog(o.getAt(0))-u.glog(r.getAt(0)),n=new Array(o.getLength()),i=0;i<o.getLength();i+=1)n[i]=o.getAt(i);for(var i=0;i<r.getLength();i+=1)n[i]^=u.gexp(u.glog(r.getAt(i))+e);return t(n,0).mod(r)},o}var r=function(r,e){var o=236,u=17,g=r,v=n[e],p=null,d=0,m=null,b=new Array,A={},x=function(t,r){d=4*g+17,p=function(t){for(var r=new Array(t),e=0;e<t;e+=1){r[e]=new Array(t);for(var n=0;n<t;n+=1)r[e][n]=null}return r}(d),E(0,0),E(d-7,0),E(0,d-7),O(),_(),B(t,r),g>=7&&T(t),null==m&&(m=C(g,v,b)),S(m,r)},E=function(t,r){for(var e=-1;e<=7;e+=1)if(!(t+e<=-1||d<=t+e))for(var n=-1;n<=7;n+=1)r+n<=-1||d<=r+n||(0<=e&&e<=6&&(0==n||6==n)||0<=n&&n<=6&&(0==e||6==e)||2<=e&&e<=4&&2<=n&&n<=4?p[t+e][r+n]=!0:p[t+e][r+n]=!1)},M=function(){for(var t=0,r=0,e=0;e<8;e+=1){x(!0,e);var n=i.getLostPoint(A);(0==e||t>n)&&(t=n,r=e)}return r},_=function(){for(var t=8;t<d-8;t+=1)null==p[t][6]&&(p[t][6]=t%2==0);for(var r=8;r<d-8;r+=1)null==p[6][r]&&(p[6][r]=r%2==0)},O=function(){for(var t=i.getPatternPosition(g),r=0;r<t.length;r+=1)for(var e=0;e<t.length;e+=1){var n=t[r],o=t[e];if(null==p[n][o])for(var u=-2;u<=2;u+=1)for(var f=-2;f<=2;f+=1)u==-2||2==u||f==-2||2==f||0==u&&0==f?p[n+u][o+f]=!0:p[n+u][o+f]=!1}},T=function(t){for(var r=i.getBCHTypeNumber(g),e=0;e<18;e+=1){var n=!t&&1==(r>>e&1);p[Math.floor(e/3)][e%3+d-8-3]=n}for(var e=0;e<18;e+=1){var n=!t&&1==(r>>e&1);p[e%3+d-8-3][Math.floor(e/3)]=n}},B=function(t,r){for(var e=v<<3|r,n=i.getBCHTypeInfo(e),o=0;o<15;o+=1){var u=!t&&1==(n>>o&1);o<6?p[o][8]=u:o<8?p[o+1][8]=u:p[d-15+o][8]=u}for(var o=0;o<15;o+=1){var u=!t&&1==(n>>o&1);o<8?p[8][d-o-1]=u:o<9?p[8][15-o-1+1]=u:p[8][15-o-1]=u}p[d-8][8]=!t},S=function(t,r){for(var e=-1,n=d-1,o=7,u=0,f=i.getMaskFunction(r),a=d-1;a>0;a-=2)for(6==a&&(a-=1);;){for(var c=0;c<2;c+=1)if(null==p[n][a-c]){var s=!1;u<t.length&&(s=1==(t[u]>>>o&1));var l=f(n,a-c);l&&(s=!s),p[n][a-c]=s,o-=1,o==-1&&(u+=1,o=7)}if(n+=e,n<0||d<=n){n-=e,e=-e;break}}},P=function(r,e){for(var n=0,o=0,u=0,f=new Array(e.length),a=new Array(e.length),c=0;c<e.length;c+=1){var s=e[c].dataCount,l=e[c].totalCount-s;o=Math.max(o,s),u=Math.max(u,l),f[c]=new Array(s);for(var h=0;h<f[c].length;h+=1)f[c][h]=255&r.getBuffer()[h+n];n+=s;var g=i.getErrorCorrectPolynomial(l),v=t(f[c],g.getLength()-1),p=v.mod(g);a[c]=new Array(g.getLength()-1);for(var h=0;h<a[c].length;h+=1){var d=h+p.getLength()-a[c].length;a[c][h]=d>=0?p.getAt(d):0}}for(var y=0,h=0;h<e.length;h+=1)y+=e[h].totalCount;for(var w=new Array(y),m=0,h=0;h<o;h+=1)for(var c=0;c<e.length;c+=1)h<f[c].length&&(w[m]=f[c][h],m+=1);for(var h=0;h<u;h+=1)for(var c=0;c<e.length;c+=1)h<a[c].length&&(w[m]=a[c][h],m+=1);return w},C=function(t,r,e){for(var n=f.getRSBlocks(t,r),c=a(),s=0;s<e.length;s+=1){var l=e[s];c.put(l.getMode(),4),c.put(l.getLength(),i.getLengthInBits(l.getMode(),t)),l.write(c)}for(var h=0,s=0;s<n.length;s+=1)h+=n[s].dataCount;if(c.getLengthInBits()>8*h)throw new Error(\"code length overflow. (\"+c.getLengthInBits()+\">\"+8*h+\")\");for(c.getLengthInBits()+4<=8*h&&c.put(0,4);c.getLengthInBits()%8!=0;)c.putBit(!1);for(;;){if(c.getLengthInBits()>=8*h)break;if(c.put(o,8),c.getLengthInBits()>=8*h)break;c.put(u,8)}return P(c,n)};return A.addData=function(t,r){r=r||\"Byte\";var e=null;switch(r){case\"Numeric\":e=c(t);break;case\"Alphanumeric\":e=s(t);break;case\"Byte\":e=l(t);break;case\"Kanji\":e=h(t);break;default:throw\"mode:\"+r}b.push(e),m=null},A.isDark=function(t,r){if(t<0||d<=t||r<0||d<=r)throw new Error(t+\",\"+r);return p[t][r]},A.getModuleCount=function(){return d},A.make=function(){x(!1,M())},A.createTableTag=function(t,r){t=t||2,r=\"undefined\"==typeof r?4*t:r;var e=\"\";e+='<table style=\"',e+=\" border-width: 0px; border-style: none;\",e+=\" border-collapse: collapse;\",e+=\" padding: 0px; margin: \"+r+\"px;\",e+='\">',e+=\"<tbody>\";for(var n=0;n<A.getModuleCount();n+=1){e+=\"<tr>\";for(var o=0;o<A.getModuleCount();o+=1)e+='<td style=\"',e+=\" border-width: 0px; border-style: none;\",e+=\" border-collapse: collapse;\",e+=\" padding: 0px; margin: 0px;\",e+=\" width: \"+t+\"px;\",e+=\" height: \"+t+\"px;\",e+=\" background-color: \",e+=A.isDark(n,o)?\"#000000\":\"#ffffff\",e+=\";\",e+='\"/>';e+=\"</tr>\"}return e+=\"</tbody>\",e+=\"</table>\"},A.createSvgTag=function(t,r){t=t||2,r=\"undefined\"==typeof r?4*t:r;var e,n,o,i,u,f=A.getModuleCount()*t+2*r,a=\"\";for(u=\"l\"+t+\",0 0,\"+t+\" -\"+t+\",0 0,-\"+t+\"z \",a+=\"<svg\",a+=' width=\"'+f+'px\"',a+=' height=\"'+f+'px\"',a+=' xmlns=\"http://www.w3.org/2000/svg\"',a+=\">\",a+='<path d=\"',o=0;o<A.getModuleCount();o+=1)for(i=o*t+r,e=0;e<A.getModuleCount();e+=1)A.isDark(o,e)&&(n=e*t+r,a+=\"M\"+n+\",\"+i+u);return a+='\" stroke=\"transparent\" fill=\"black\"/>',a+=\"</svg>\"},A.createImgTag=function(t,r){t=t||2,r=\"undefined\"==typeof r?4*t:r;var e=A.getModuleCount()*t+2*r,n=r,o=e-r;return y(e,e,function(r,e){if(n<=r&&r<o&&n<=e&&e<o){var i=Math.floor((r-n)/t),u=Math.floor((e-n)/t);return A.isDark(u,i)?0:1}return 1})},A.createImgObject=function(t,r){t=t||2,r=\"undefined\"==typeof r?4*t:r;var e=A.getModuleCount()*t+2*r,n=r,o=e-r;return w(e,e,function(r,e){if(n<=r&&r<o&&n<=e&&e<o){var i=Math.floor((r-n)/t),u=Math.floor((e-n)/t);return A.isDark(u,i)?0:1}return 1})},A};r.stringToBytes=function(t){for(var r=new Array,e=0;e<t.length;e+=1){var n=t.charCodeAt(e);r.push(255&n)}return r},r.createStringToBytes=function(t,r){var e=function(){for(var e=p(t),n=function(){var t=e.read();if(t==-1)throw new Error;return t},o=0,i={};;){var u=e.read();if(u==-1)break;var f=n(),a=n(),c=n(),s=String.fromCharCode(u<<8|f),l=a<<8|c;i[s]=l,o+=1}if(o!=r)throw new Error(o+\" != \"+r);return i}(),n=\"?\".charCodeAt(0);return function(t){for(var r=new Array,o=0;o<t.length;o+=1){var i=t.charCodeAt(o);if(i<128)r.push(i);else{var u=e[t.charAt(o)];\"number\"==typeof u?(255&u)==u?r.push(u):(r.push(u>>>8),r.push(255&u)):r.push(n)}}return r}};var e={MODE_NUMBER:1,MODE_ALPHA_NUM:2,MODE_8BIT_BYTE:4,MODE_KANJI:8},n={L:1,M:0,Q:3,H:2},o={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7},i=function(){var r=[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],n=1335,i=7973,f=21522,a={},c=function(t){for(var r=0;0!=t;)r+=1,t>>>=1;return r};return a.getBCHTypeInfo=function(t){for(var r=t<<10;c(r)-c(n)>=0;)r^=n<<c(r)-c(n);return(t<<10|r)^f},a.getBCHTypeNumber=function(t){for(var r=t<<12;c(r)-c(i)>=0;)r^=i<<c(r)-c(i);return t<<12|r},a.getPatternPosition=function(t){return r[t-1]},a.getMaskFunction=function(t){switch(t){case o.PATTERN000:return function(t,r){return(t+r)%2==0};case o.PATTERN001:return function(t,r){return t%2==0};case o.PATTERN010:return function(t,r){return r%3==0};case o.PATTERN011:return function(t,r){return(t+r)%3==0};case o.PATTERN100:return function(t,r){return(Math.floor(t/2)+Math.floor(r/3))%2==0};case o.PATTERN101:return function(t,r){return t*r%2+t*r%3==0};case o.PATTERN110:return function(t,r){return(t*r%2+t*r%3)%2==0};case o.PATTERN111:return function(t,r){return(t*r%3+(t+r)%2)%2==0};default:throw new Error(\"bad maskPattern:\"+t)}},a.getErrorCorrectPolynomial=function(r){for(var e=t([1],0),n=0;n<r;n+=1)e=e.multiply(t([1,u.gexp(n)],0));return e},a.getLengthInBits=function(t,r){if(1<=r&&r<10)switch(t){case e.MODE_NUMBER:return 10;case e.MODE_ALPHA_NUM:return 9;case e.MODE_8BIT_BYTE:return 8;case e.MODE_KANJI:return 8;default:throw new Error(\"mode:\"+t)}else if(r<27)switch(t){case e.MODE_NUMBER:return 12;case e.MODE_ALPHA_NUM:return 11;case e.MODE_8BIT_BYTE:return 16;case e.MODE_KANJI:return 10;default:throw new Error(\"mode:\"+t)}else{if(!(r<41))throw new Error(\"type:\"+r);switch(t){case e.MODE_NUMBER:return 14;case e.MODE_ALPHA_NUM:return 13;case e.MODE_8BIT_BYTE:return 16;case e.MODE_KANJI:return 12;default:throw new Error(\"mode:\"+t)}}},a.getLostPoint=function(t){for(var r=t.getModuleCount(),e=0,n=0;n<r;n+=1)for(var o=0;o<r;o+=1){for(var i=0,u=t.isDark(n,o),f=-1;f<=1;f+=1)if(!(n+f<0||r<=n+f))for(var a=-1;a<=1;a+=1)o+a<0||r<=o+a||0==f&&0==a||u==t.isDark(n+f,o+a)&&(i+=1);i>5&&(e+=3+i-5)}for(var n=0;n<r-1;n+=1)for(var o=0;o<r-1;o+=1){var c=0;t.isDark(n,o)&&(c+=1),t.isDark(n+1,o)&&(c+=1),t.isDark(n,o+1)&&(c+=1),t.isDark(n+1,o+1)&&(c+=1),0!=c&&4!=c||(e+=3)}for(var n=0;n<r;n+=1)for(var o=0;o<r-6;o+=1)t.isDark(n,o)&&!t.isDark(n,o+1)&&t.isDark(n,o+2)&&t.isDark(n,o+3)&&t.isDark(n,o+4)&&!t.isDark(n,o+5)&&t.isDark(n,o+6)&&(e+=40);for(var o=0;o<r;o+=1)for(var n=0;n<r-6;n+=1)t.isDark(n,o)&&!t.isDark(n+1,o)&&t.isDark(n+2,o)&&t.isDark(n+3,o)&&t.isDark(n+4,o)&&!t.isDark(n+5,o)&&t.isDark(n+6,o)&&(e+=40);for(var s=0,o=0;o<r;o+=1)for(var n=0;n<r;n+=1)t.isDark(n,o)&&(s+=1);var l=Math.abs(100*s/r/r-50)/5;return e+=10*l},a}(),u=function(){for(var t=new Array(256),r=new Array(256),e=0;e<8;e+=1)t[e]=1<<e;for(var e=8;e<256;e+=1)t[e]=t[e-4]^t[e-5]^t[e-6]^t[e-8];for(var e=0;e<255;e+=1)r[t[e]]=e;var n={};return n.glog=function(t){if(t<1)throw new Error(\"glog(\"+t+\")\");return r[t]},n.gexp=function(r){for(;r<0;)r+=255;for(;r>=256;)r-=255;return t[r]},n}(),f=function(){var t=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12,7,37,13],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],r=function(t,r){var e={};return e.totalCount=t,e.dataCount=r,e},e={},o=function(r,e){switch(e){case n.L:return t[4*(r-1)+0];case n.M:return t[4*(r-1)+1];case n.Q:return t[4*(r-1)+2];case n.H:return t[4*(r-1)+3];default:return}};return e.getRSBlocks=function(t,e){var n=o(t,e);if(\"undefined\"==typeof n)throw new Error(\"bad rs block @ typeNumber:\"+t+\"/errorCorrectionLevel:\"+e);for(var i=n.length/3,u=new Array,f=0;f<i;f+=1)for(var a=n[3*f+0],c=n[3*f+1],s=n[3*f+2],l=0;l<a;l+=1)u.push(r(c,s));return u},e}(),a=function(){var t=new Array,r=0,e={};return e.getBuffer=function(){return t},e.getAt=function(r){var e=Math.floor(r/8);return 1==(t[e]>>>7-r%8&1)},e.put=function(t,r){for(var n=0;n<r;n+=1)e.putBit(1==(t>>>r-n-1&1))},e.getLengthInBits=function(){return r},e.putBit=function(e){var n=Math.floor(r/8);t.length<=n&&t.push(0),e&&(t[n]|=128>>>r%8),r+=1},e},c=function(t){var r=e.MODE_NUMBER,n=t,o={};o.getMode=function(){return r},o.getLength=function(t){return n.length},o.write=function(t){for(var r=n,e=0;e+2<r.length;)t.put(i(r.substring(e,e+3)),10),e+=3;e<r.length&&(r.length-e==1?t.put(i(r.substring(e,e+1)),4):r.length-e==2&&t.put(i(r.substring(e,e+2)),7))};var i=function(t){for(var r=0,e=0;e<t.length;e+=1)r=10*r+u(t.charAt(e));return r},u=function(t){if(\"0\"<=t&&t<=\"9\")return t.charCodeAt(0)-\"0\".charCodeAt(0);throw\"illegal char :\"+t};return o},s=function(t){var r=e.MODE_ALPHA_NUM,n=t,o={};o.getMode=function(){return r},o.getLength=function(t){return n.length},o.write=function(t){for(var r=n,e=0;e+1<r.length;)t.put(45*i(r.charAt(e))+i(r.charAt(e+1)),11),e+=2;e<r.length&&t.put(i(r.charAt(e)),6)};var i=function(t){if(\"0\"<=t&&t<=\"9\")return t.charCodeAt(0)-\"0\".charCodeAt(0);if(\"A\"<=t&&t<=\"Z\")return t.charCodeAt(0)-\"A\".charCodeAt(0)+10;switch(t){case\" \":return 36;case\"$\":return 37;case\"%\":return 38;case\"*\":return 39;case\"+\":return 40;case\"-\":return 41;case\".\":return 42;case\"/\":return 43;case\":\":return 44;default:throw\"illegal char :\"+t}};return o},l=function(t){var n=e.MODE_8BIT_BYTE,o=r.stringToBytes(t),i={};return i.getMode=function(){return n},i.getLength=function(t){return o.length},i.write=function(t){for(var r=0;r<o.length;r+=1)t.put(o[r],8)},i},h=function(t){var n=e.MODE_KANJI,o=r.stringToBytes(t);!function(t,e){var n=r.stringToBytes(t);if(2!=n.length||(n[0]<<8|n[1])!=e)throw\"sjis not supported.\"}(\"友\",38726);var i={};return i.getMode=function(){return n},i.getLength=function(t){return~~(o.length/2)},i.write=function(t){for(var r=o,e=0;e+1<r.length;){var n=(255&r[e])<<8|255&r[e+1];if(33088<=n&&n<=40956)n-=33088;else{if(!(57408<=n&&n<=60351))throw\"illegal char at \"+(e+1)+\"/\"+n;n-=49472}n=192*(n>>>8&255)+(255&n),t.put(n,13),e+=2}if(e<r.length)throw\"illegal char at \"+(e+1)},i},g=function(){var t=new Array,r={};return r.writeByte=function(r){t.push(255&r)},r.writeShort=function(t){r.writeByte(t),r.writeByte(t>>>8)},r.writeBytes=function(t,e,n){e=e||0,n=n||t.length;for(var o=0;o<n;o+=1)r.writeByte(t[o+e])},r.writeString=function(t){for(var e=0;e<t.length;e+=1)r.writeByte(t.charCodeAt(e))},r.toByteArray=function(){return t},r.toString=function(){var r=\"\";r+=\"[\";for(var e=0;e<t.length;e+=1)e>0&&(r+=\",\"),r+=t[e];return r+=\"]\"},r},v=function(){var t=0,r=0,e=0,n=\"\",o={},i=function(t){n+=String.fromCharCode(u(63&t))},u=function(t){if(t<0);else{if(t<26)return 65+t;if(t<52)return 97+(t-26);if(t<62)return 48+(t-52);if(62==t)return 43;if(63==t)return 47}throw new Error(\"n:\"+t)};return o.writeByte=function(n){for(t=t<<8|255&n,r+=8,e+=1;r>=6;)i(t>>>r-6),r-=6},o.flush=function(){if(r>0&&(i(t<<6-r),t=0,r=0),e%3!=0)for(var o=3-e%3,u=0;u<o;u+=1)n+=\"=\"},o.toString=function(){return n},o},p=function(t){var r=t,e=0,n=0,o=0,i={};i.read=function(){for(;o<8;){if(e>=r.length){if(0==o)return-1;throw new Error(\"unexpected end of file./\"+o)}var t=r.charAt(e);if(e+=1,\"=\"==t)return o=0,-1;t.match(/^\\s$/)||(n=n<<6|u(t.charCodeAt(0)),o+=6)}var i=n>>>o-8&255;return o-=8,i};var u=function(t){if(65<=t&&t<=90)return t-65;if(97<=t&&t<=122)return t-97+26;if(48<=t&&t<=57)return t-48+52;if(43==t)return 62;if(47==t)return 63;throw new Error(\"c:\"+t)};return i},d=function(t,r){var e=t,n=r,o=new Array(t*r),i={};i.setPixel=function(t,r,n){o[r*e+t]=n},i.write=function(t){t.writeString(\"GIF87a\"),t.writeShort(e),t.writeShort(n),t.writeByte(128),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(255),t.writeByte(255),t.writeByte(255),t.writeString(\",\"),t.writeShort(0),t.writeShort(0),t.writeShort(e),t.writeShort(n),t.writeByte(0);var r=2,o=f(r);t.writeByte(r);for(var i=0;o.length-i>255;)t.writeByte(255),t.writeBytes(o,i,255),i+=255;t.writeByte(o.length-i),t.writeBytes(o,i,o.length-i),t.writeByte(0),t.writeString(\";\")};var u=function(t){var r=t,e=0,n=0,o={};return o.write=function(t,o){if(t>>>o!=0)throw new Error(\"length over\");for(;e+o>=8;)r.writeByte(255&(t<<e|n)),o-=8-e,t>>>=8-e,n=0,e=0;n|=t<<e,e+=o},o.flush=function(){e>0&&r.writeByte(n)},o},f=function(t){for(var r=1<<t,e=(1<<t)+1,n=t+1,i=a(),f=0;f<r;f+=1)i.add(String.fromCharCode(f));i.add(String.fromCharCode(r)),i.add(String.fromCharCode(e));var c=g(),s=u(c);s.write(r,n);var l=0,h=String.fromCharCode(o[l]);for(l+=1;l<o.length;){var v=String.fromCharCode(o[l]);l+=1,i.contains(h+v)?h+=v:(s.write(i.indexOf(h),n),i.size()<4095&&(i.size()==1<<n&&(n+=1),i.add(h+v)),h=v)}return s.write(i.indexOf(h),n),s.write(e,n),s.flush(),c.toByteArray()},a=function(){var t={},r=0,e={};return e.add=function(n){if(e.contains(n))throw new Error(\"dup key:\"+n);t[n]=r,r+=1},e.size=function(){return r},e.indexOf=function(r){return t[r]},e.contains=function(r){return\"undefined\"!=typeof t[r]},e};return i},y=function(t,r,e,n){for(var o=d(t,r),i=0;i<r;i+=1)for(var u=0;u<t;u+=1)o.setPixel(u,i,e(u,i));var f=g();o.write(f);for(var a=v(),c=f.toByteArray(),s=0;s<c.length;s+=1)a.writeByte(c[s]);a.flush();var l=\"\";return l+=\"<img\",l+=' src=\"',l+=\"data:image/gif;base64,\",l+=a,l+='\"',l+=' width=\"',l+=t,l+='\"',l+=' height=\"',l+=r,l+='\"',n&&(l+=' alt=\"',l+=n,l+='\"'),l+=\"/>\"},w=function(t,r,e){for(var n=d(t,r),o=0;o<r;o+=1)for(var i=0;i<t;i+=1)n.setPixel(i,o,e(i,o));var u=g();n.write(u);for(var f=v(),a=u.toByteArray(),c=0;c<a.length;c+=1)f.writeByte(a[c]);f.flush();var s=new Image;return s.src=\"data:image/gif;base64,\"+f,s.width=t,s.height=r,s};return{QRCode:r,QRUtil:i}}());!function(e){i=[],o=e,u=\"function\"==typeof o?o.apply(r,i):o,!(void 0!==u&&(t.exports=u))}(function(){return{QRCode:a.QRCode,QRUtil:a.QRUtil}})},function(t,r,e){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}r.__esModule=!0;var o=e(23),i=n(o),u=e(59),f=n(u),a=\"function\"==typeof f.default&&\"symbol\"==typeof i.default?function(t){return typeof t}:function(t){return t&&\"function\"==typeof f.default&&t.constructor===f.default&&t!==f.default.prototype?\"symbol\":typeof t};r.default=\"function\"==typeof f.default&&\"symbol\"===a(i.default)?function(t){return\"undefined\"==typeof t?\"undefined\":a(t)}:function(t){return t&&\"function\"==typeof f.default&&t.constructor===f.default&&t!==f.default.prototype?\"symbol\":\"undefined\"==typeof t?\"undefined\":a(t)}},function(t,r,e){t.exports={default:e(24),__esModule:!0}},function(t,r,e){e(25),e(54),t.exports=e(58).f(\"iterator\")},function(t,r,e){\"use strict\";var n=e(26)(!0);e(29)(String,\"String\",function(t){this._t=String(t),this._i=0},function(){var t,r=this._t,e=this._i;return e>=r.length?{value:void 0,done:!0}:(t=n(r,e),this._i+=t.length,{value:t,done:!1})})},function(t,r,e){var n=e(27),o=e(28);t.exports=function(t){return function(r,e){var i,u,f=String(o(r)),a=n(e),c=f.length;return a<0||a>=c?t?\"\":void 0:(i=f.charCodeAt(a),i<55296||i>56319||a+1===c||(u=f.charCodeAt(a+1))<56320||u>57343?t?f.charAt(a):i:t?f.slice(a,a+2):(i-55296<<10)+(u-56320)+65536)}}},function(t,r){var e=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:e)(t)}},function(t,r){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,r,e){\"use strict\";var n=e(30),o=e(6),i=e(31),u=e(11),f=e(32),a=e(33),c=e(34),s=e(50),l=e(52),h=e(51)(\"iterator\"),g=!([].keys&&\"next\"in[].keys()),v=\"@@iterator\",p=\"keys\",d=\"values\",y=function(){return this};t.exports=function(t,r,e,w,m,b,A){c(e,r,w);var x,E,M,_=function(t){if(!g&&t in S)return S[t];switch(t){case p:return function(){return new e(this,t)};case d:return function(){return new e(this,t)}}return function(){return new e(this,t)}},O=r+\" Iterator\",T=m==d,B=!1,S=t.prototype,P=S[h]||S[v]||m&&S[m],C=P||_(m),k=m?T?_(\"entries\"):C:void 0,D=\"Array\"==r?S.entries||P:P;if(D&&(M=l(D.call(new t)),M!==Object.prototype&&(s(M,O,!0),n||f(M,h)||u(M,h,y))),T&&P&&P.name!==d&&(B=!0,C=function(){return P.call(this)}),n&&!A||!g&&!B&&S[h]||u(S,h,C),a[r]=C,a[O]=y,m)if(x={values:T?C:_(d),keys:b?C:_(p),entries:k},A)for(E in x)E in S||i(S,E,x[E]);else o(o.P+o.F*(g||B),r,x);return x}},function(t,r){t.exports=!0},function(t,r,e){t.exports=e(11)},function(t,r){var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},function(t,r){t.exports={}},function(t,r,e){\"use strict\";var n=e(35),o=e(20),i=e(50),u={};e(11)(u,e(51)(\"iterator\"),function(){return this}),t.exports=function(t,r,e){t.prototype=n(u,{next:o(1,e)}),i(t,r+\" Iterator\")}},function(t,r,e){var n=e(13),o=e(36),i=e(48),u=e(45)(\"IE_PROTO\"),f=function(){},a=\"prototype\",c=function(){var t,r=e(18)(\"iframe\"),n=i.length,o=\"<\",u=\">\";for(r.style.display=\"none\",e(49).appendChild(r),r.src=\"javascript:\",t=r.contentWindow.document,t.open(),t.write(o+\"script\"+u+\"document.F=Object\"+o+\"/script\"+u),t.close(),c=t.F;n--;)delete c[a][i[n]];return c()};t.exports=Object.create||function(t,r){var e;return null!==t?(f[a]=n(t),e=new f,f[a]=null,e[u]=t):e=c(),void 0===r?e:o(e,r)}},function(t,r,e){var n=e(12),o=e(13),i=e(37);t.exports=e(16)?Object.defineProperties:function(t,r){o(t);for(var e,u=i(r),f=u.length,a=0;f>a;)n.f(t,e=u[a++],r[e]);return t}},function(t,r,e){var n=e(38),o=e(48);t.exports=Object.keys||function(t){return n(t,o)}},function(t,r,e){var n=e(32),o=e(39),i=e(42)(!1),u=e(45)(\"IE_PROTO\");t.exports=function(t,r){var e,f=o(t),a=0,c=[];for(e in f)e!=u&&n(f,e)&&c.push(e);for(;r.length>a;)n(f,e=r[a++])&&(~i(c,e)||c.push(e));return c}},function(t,r,e){var n=e(40),o=e(28);t.exports=function(t){return n(o(t))}},function(t,r,e){var n=e(41);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==n(t)?t.split(\"\"):Object(t)}},function(t,r){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,r,e){var n=e(39),o=e(43),i=e(44);t.exports=function(t){return function(r,e,u){var f,a=n(r),c=o(a.length),s=i(u,c);if(t&&e!=e){for(;c>s;)if(f=a[s++],f!=f)return!0}else for(;c>s;s++)if((t||s in a)&&a[s]===e)return t||s||0;return!t&&-1}}},function(t,r,e){var n=e(27),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},function(t,r,e){var n=e(27),o=Math.max,i=Math.min;t.exports=function(t,r){return t=n(t),t<0?o(t+r,0):i(t,r)}},function(t,r,e){var n=e(46)(\"keys\"),o=e(47);t.exports=function(t){return n[t]||(n[t]=o(t))}},function(t,r,e){var n=e(7),o=\"__core-js_shared__\",i=n[o]||(n[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,r){var e=0,n=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++e+n).toString(36))}},function(t,r){t.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},function(t,r,e){t.exports=e(7).document&&document.documentElement},function(t,r,e){var n=e(12).f,o=e(32),i=e(51)(\"toStringTag\");t.exports=function(t,r,e){t&&!o(t=e?t:t.prototype,i)&&n(t,i,{configurable:!0,value:r})}},function(t,r,e){var n=e(46)(\"wks\"),o=e(47),i=e(7).Symbol,u=\"function\"==typeof i,f=t.exports=function(t){return n[t]||(n[t]=u&&i[t]||(u?i:o)(\"Symbol.\"+t))};f.store=n},function(t,r,e){var n=e(32),o=e(53),i=e(45)(\"IE_PROTO\"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),n(t,i)?t[i]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,r,e){var n=e(28);t.exports=function(t){return Object(n(t))}},function(t,r,e){e(55);for(var n=e(7),o=e(11),i=e(33),u=e(51)(\"toStringTag\"),f=[\"NodeList\",\"DOMTokenList\",\"MediaList\",\"StyleSheetList\",\"CSSRuleList\"],a=0;a<5;a++){var c=f[a],s=n[c],l=s&&s.prototype;l&&!l[u]&&o(l,u,c),i[c]=i.Array}},function(t,r,e){\"use strict\";var n=e(56),o=e(57),i=e(33),u=e(39);t.exports=e(29)(Array,\"Array\",function(t,r){this._t=u(t),this._i=0,this._k=r},function(){var t=this._t,r=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,o(1)):\"keys\"==r?o(0,e):\"values\"==r?o(0,t[e]):o(0,[e,t[e]])},\"values\"),i.Arguments=i.Array,n(\"keys\"),n(\"values\"),n(\"entries\")},function(t,r){t.exports=function(){}},function(t,r){t.exports=function(t,r){return{value:r,done:!!t}}},function(t,r,e){r.f=e(51)},function(t,r,e){t.exports={default:e(60),__esModule:!0}},function(t,r,e){e(61),e(72),e(73),e(74),t.exports=e(8).Symbol},function(t,r,e){\"use strict\";var n=e(7),o=e(32),i=e(16),u=e(6),f=e(31),a=e(62).KEY,c=e(17),s=e(46),l=e(50),h=e(47),g=e(51),v=e(58),p=e(63),d=e(64),y=e(65),w=e(68),m=e(13),b=e(39),A=e(19),x=e(20),E=e(35),M=e(69),_=e(71),O=e(12),T=e(37),B=_.f,S=O.f,P=M.f,C=n.Symbol,k=n.JSON,D=k&&k.stringify,N=\"prototype\",I=g(\"_hidden\"),L=g(\"toPrimitive\"),j={}.propertyIsEnumerable,R=s(\"symbol-registry\"),F=s(\"symbols\"),U=s(\"op-symbols\"),Q=Object[N],H=\"function\"==typeof C,J=n.QObject,K=!J||!J[N]||!J[N].findChild,Y=i&&c(function(){\nreturn 7!=E(S({},\"a\",{get:function(){return S(this,\"a\",{value:7}).a}})).a})?function(t,r,e){var n=B(Q,r);n&&delete Q[r],S(t,r,e),n&&t!==Q&&S(Q,r,n)}:S,z=function(t){var r=F[t]=E(C[N]);return r._k=t,r},W=H&&\"symbol\"==typeof C.iterator?function(t){return\"symbol\"==typeof t}:function(t){return t instanceof C},q=function(t,r,e){return t===Q&&q(U,r,e),m(t),r=A(r,!0),m(e),o(F,r)?(e.enumerable?(o(t,I)&&t[I][r]&&(t[I][r]=!1),e=E(e,{enumerable:x(0,!1)})):(o(t,I)||S(t,I,x(1,{})),t[I][r]=!0),Y(t,r,e)):S(t,r,e)},G=function(t,r){m(t);for(var e,n=y(r=b(r)),o=0,i=n.length;i>o;)q(t,e=n[o++],r[e]);return t},$=function(t,r){return void 0===r?E(t):G(E(t),r)},Z=function(t){var r=j.call(this,t=A(t,!0));return!(this===Q&&o(F,t)&&!o(U,t))&&(!(r||!o(this,t)||!o(F,t)||o(this,I)&&this[I][t])||r)},V=function(t,r){if(t=b(t),r=A(r,!0),t!==Q||!o(F,r)||o(U,r)){var e=B(t,r);return!e||!o(F,r)||o(t,I)&&t[I][r]||(e.enumerable=!0),e}},X=function(t){for(var r,e=P(b(t)),n=[],i=0;e.length>i;)o(F,r=e[i++])||r==I||r==a||n.push(r);return n},tt=function(t){for(var r,e=t===Q,n=P(e?U:b(t)),i=[],u=0;n.length>u;)!o(F,r=n[u++])||e&&!o(Q,r)||i.push(F[r]);return i};H||(C=function(){if(this instanceof C)throw TypeError(\"Symbol is not a constructor!\");var t=h(arguments.length>0?arguments[0]:void 0),r=function(e){this===Q&&r.call(U,e),o(this,I)&&o(this[I],t)&&(this[I][t]=!1),Y(this,t,x(1,e))};return i&&K&&Y(Q,t,{configurable:!0,set:r}),z(t)},f(C[N],\"toString\",function(){return this._k}),_.f=V,O.f=q,e(70).f=M.f=X,e(67).f=Z,e(66).f=tt,i&&!e(30)&&f(Q,\"propertyIsEnumerable\",Z,!0),v.f=function(t){return z(g(t))}),u(u.G+u.W+u.F*!H,{Symbol:C});for(var rt=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),et=0;rt.length>et;)g(rt[et++]);for(var rt=T(g.store),et=0;rt.length>et;)p(rt[et++]);u(u.S+u.F*!H,\"Symbol\",{for:function(t){return o(R,t+=\"\")?R[t]:R[t]=C(t)},keyFor:function(t){if(W(t))return d(R,t);throw TypeError(t+\" is not a symbol!\")},useSetter:function(){K=!0},useSimple:function(){K=!1}}),u(u.S+u.F*!H,\"Object\",{create:$,defineProperty:q,defineProperties:G,getOwnPropertyDescriptor:V,getOwnPropertyNames:X,getOwnPropertySymbols:tt}),k&&u(u.S+u.F*(!H||c(function(){var t=C();return\"[null]\"!=D([t])||\"{}\"!=D({a:t})||\"{}\"!=D(Object(t))})),\"JSON\",{stringify:function(t){if(void 0!==t&&!W(t)){for(var r,e,n=[t],o=1;arguments.length>o;)n.push(arguments[o++]);return r=n[1],\"function\"==typeof r&&(e=r),!e&&w(r)||(r=function(t,r){if(e&&(r=e.call(this,t,r)),!W(r))return r}),n[1]=r,D.apply(k,n)}}}),C[N][L]||e(11)(C[N],L,C[N].valueOf),l(C,\"Symbol\"),l(Math,\"Math\",!0),l(n.JSON,\"JSON\",!0)},function(t,r,e){var n=e(47)(\"meta\"),o=e(14),i=e(32),u=e(12).f,f=0,a=Object.isExtensible||function(){return!0},c=!e(17)(function(){return a(Object.preventExtensions({}))}),s=function(t){u(t,n,{value:{i:\"O\"+ ++f,w:{}}})},l=function(t,r){if(!o(t))return\"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!i(t,n)){if(!a(t))return\"F\";if(!r)return\"E\";s(t)}return t[n].i},h=function(t,r){if(!i(t,n)){if(!a(t))return!0;if(!r)return!1;s(t)}return t[n].w},g=function(t){return c&&v.NEED&&a(t)&&!i(t,n)&&s(t),t},v=t.exports={KEY:n,NEED:!1,fastKey:l,getWeak:h,onFreeze:g}},function(t,r,e){var n=e(7),o=e(8),i=e(30),u=e(58),f=e(12).f;t.exports=function(t){var r=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});\"_\"==t.charAt(0)||t in r||f(r,t,{value:u.f(t)})}},function(t,r,e){var n=e(37),o=e(39);t.exports=function(t,r){for(var e,i=o(t),u=n(i),f=u.length,a=0;f>a;)if(i[e=u[a++]]===r)return e}},function(t,r,e){var n=e(37),o=e(66),i=e(67);t.exports=function(t){var r=n(t),e=o.f;if(e)for(var u,f=e(t),a=i.f,c=0;f.length>c;)a.call(t,u=f[c++])&&r.push(u);return r}},function(t,r){r.f=Object.getOwnPropertySymbols},function(t,r){r.f={}.propertyIsEnumerable},function(t,r,e){var n=e(41);t.exports=Array.isArray||function(t){return\"Array\"==n(t)}},function(t,r,e){var n=e(39),o=e(70).f,i={}.toString,u=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],f=function(t){try{return o(t)}catch(t){return u.slice()}};t.exports.f=function(t){return u&&\"[object Window]\"==i.call(t)?f(t):o(n(t))}},function(t,r,e){var n=e(38),o=e(48).concat(\"length\",\"prototype\");r.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},function(t,r,e){var n=e(67),o=e(20),i=e(39),u=e(19),f=e(32),a=e(15),c=Object.getOwnPropertyDescriptor;r.f=e(16)?c:function(t,r){if(t=i(t),r=u(r,!0),a)try{return c(t,r)}catch(t){}if(f(t,r))return o(!n.f.call(t,r),t[r])}},function(t,r){},function(t,r,e){e(63)(\"asyncIterator\")},function(t,r,e){e(63)(\"observable\")},function(t,r,e){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(r,\"__esModule\",{value:!0});var o=e(1),i=n(o),u=e(2),f=n(u),a=function(){function t(){(0,i.default)(this,t)}return(0,f.default)(t,null,[{key:\"createCanvas\",value:function(t,r){var e=document.createElement(\"canvas\");return e.width=t,e.height=t,e.getContext(\"2d\").drawImage(r,0,0,t,t),e}},{key:\"threshold\",value:function(t,r,e,n){return.2126*t+.7152*r+.0722*e>=n?255:0}}]),t}();r.default=a}])});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/qartjs/dist/qart.min.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}